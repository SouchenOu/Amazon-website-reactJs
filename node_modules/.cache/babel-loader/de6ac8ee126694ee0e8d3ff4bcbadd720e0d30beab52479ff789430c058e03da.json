{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.noop = noop;\nexports.returnTrue = returnTrue;\nexports.charIsNumber = charIsNumber;\nexports.escapeRegExp = escapeRegExp;\nexports.fixLeadingZero = fixLeadingZero;\nexports.splitString = splitString;\nexports.limitToScale = limitToScale;\nexports.roundToPrecision = roundToPrecision;\nexports.omit = omit;\nexports.setCaretPosition = setCaretPosition;\n\n// basic noop function\nfunction noop() {}\nfunction returnTrue() {\n  return true;\n}\nfunction charIsNumber(char) {\n  return !!(char || '').match(/\\d/);\n}\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nfunction fixLeadingZero(numStr) {\n  if (!numStr) return numStr;\n  var isNegative = numStr[0] === '-';\n  if (isNegative) numStr = numStr.substring(1, numStr.length);\n  var parts = numStr.split('.');\n  var beforeDecimal = parts[0].replace(/^0+/, '') || '0';\n  var afterDecimal = parts[1] || '';\n  return '' + (isNegative ? '-' : '') + beforeDecimal + (afterDecimal ? '.' + afterDecimal : '');\n}\nfunction splitString(str, index) {\n  return [str.substring(0, index), str.substring(index)];\n}\n\n/**\r\n * limit decimal numbers to given scale\r\n * Not used .fixedTo because that will break with big numbers\r\n */\nfunction limitToScale(numStr, scale, fixedDecimalScale) {\n  var str = '';\n  var filler = fixedDecimalScale ? '0' : '';\n  for (var i = 0; i <= scale - 1; i++) {\n    str += numStr[i] || filler;\n  }\n  return str;\n}\n\n/**\r\n * This method is required to round prop value to given scale.\r\n * Not used .round or .fixedTo because that will break with big numbers\r\n */\nfunction roundToPrecision(numStr, scale, fixedDecimalScale) {\n  var numberParts = numStr.split('.');\n  var roundedDecimalParts = parseFloat('0.' + (numberParts[1] || '0')).toFixed(scale).split('.');\n  var intPart = numberParts[0].split('').reverse().reduce(function (roundedStr, current, idx) {\n    if (roundedStr.length > idx) {\n      return (Number(roundedStr[0]) + Number(current)).toString() + roundedStr.substring(1, roundedStr.length);\n    }\n    return current + roundedStr;\n  }, roundedDecimalParts[0]);\n  var decimalPart = limitToScale(roundedDecimalParts[1] || '', (numberParts[1] || '').length, fixedDecimalScale);\n  return intPart + (decimalPart ? '.' + decimalPart : '');\n}\nfunction omit(obj, keyMaps) {\n  var filteredObj = {};\n  Object.keys(obj).forEach(function (key) {\n    if (!keyMaps[key]) filteredObj[key] = obj[key];\n  });\n  return filteredObj;\n}\n\n/** set the caret positon in an input field **/\nfunction setCaretPosition(el, caretPos) {\n  el.value = el.value;\n  // ^ this is used to not only get \"focus\", but\n  // to make sure we don't have it everything -selected-\n  // (it causes an issue in chrome, and having it doesn't hurt any other browser)\n  if (el !== null) {\n    if (el.createTextRange) {\n      var range = el.createTextRange();\n      range.move('character', caretPos);\n      range.select();\n      return true;\n    }\n    // (el.selectionStart === 0 added for Firefox bug)\n    if (el.selectionStart || el.selectionStart === 0) {\n      el.focus();\n      el.setSelectionRange(caretPos, caretPos);\n      return true;\n    }\n\n    // fail city, fortunately this never happens (as far as I've tested) :)\n    el.focus();\n    return false;\n  }\n}\nvar thousandGroupSpacing = exports.thousandGroupSpacing = {\n  two: '2',\n  twoScaled: '2s',\n  three: '3',\n  four: '4'\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","noop","returnTrue","charIsNumber","escapeRegExp","fixLeadingZero","splitString","limitToScale","roundToPrecision","omit","setCaretPosition","char","match","str","replace","numStr","isNegative","substring","length","parts","split","beforeDecimal","afterDecimal","index","scale","fixedDecimalScale","filler","i","numberParts","roundedDecimalParts","parseFloat","toFixed","intPart","reverse","reduce","roundedStr","current","idx","Number","toString","decimalPart","obj","keyMaps","filteredObj","keys","forEach","key","el","caretPos","createTextRange","range","move","select","selectionStart","focus","setSelectionRange","thousandGroupSpacing","two","twoScaled","three","four"],"sources":["/Users/souchen/Desktop/Amazon/node_modules/react-currency-format/lib/utils.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.noop = noop;\nexports.returnTrue = returnTrue;\nexports.charIsNumber = charIsNumber;\nexports.escapeRegExp = escapeRegExp;\nexports.fixLeadingZero = fixLeadingZero;\nexports.splitString = splitString;\nexports.limitToScale = limitToScale;\nexports.roundToPrecision = roundToPrecision;\nexports.omit = omit;\nexports.setCaretPosition = setCaretPosition;\n\n\n// basic noop function\nfunction noop() {}\nfunction returnTrue() {\n  return true;\n}\n\nfunction charIsNumber(char) {\n  return !!(char || '').match(/\\d/);\n}\n\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\nfunction fixLeadingZero(numStr) {\n  if (!numStr) return numStr;\n  var isNegative = numStr[0] === '-';\n  if (isNegative) numStr = numStr.substring(1, numStr.length);\n  var parts = numStr.split('.');\n  var beforeDecimal = parts[0].replace(/^0+/, '') || '0';\n  var afterDecimal = parts[1] || '';\n\n  return '' + (isNegative ? '-' : '') + beforeDecimal + (afterDecimal ? '.' + afterDecimal : '');\n}\n\nfunction splitString(str, index) {\n  return [str.substring(0, index), str.substring(index)];\n}\n\n/**\r\n * limit decimal numbers to given scale\r\n * Not used .fixedTo because that will break with big numbers\r\n */\nfunction limitToScale(numStr, scale, fixedDecimalScale) {\n  var str = '';\n  var filler = fixedDecimalScale ? '0' : '';\n  for (var i = 0; i <= scale - 1; i++) {\n    str += numStr[i] || filler;\n  }\n  return str;\n}\n\n/**\r\n * This method is required to round prop value to given scale.\r\n * Not used .round or .fixedTo because that will break with big numbers\r\n */\nfunction roundToPrecision(numStr, scale, fixedDecimalScale) {\n  var numberParts = numStr.split('.');\n  var roundedDecimalParts = parseFloat('0.' + (numberParts[1] || '0')).toFixed(scale).split('.');\n  var intPart = numberParts[0].split('').reverse().reduce(function (roundedStr, current, idx) {\n    if (roundedStr.length > idx) {\n      return (Number(roundedStr[0]) + Number(current)).toString() + roundedStr.substring(1, roundedStr.length);\n    }\n    return current + roundedStr;\n  }, roundedDecimalParts[0]);\n\n  var decimalPart = limitToScale(roundedDecimalParts[1] || '', (numberParts[1] || '').length, fixedDecimalScale);\n\n  return intPart + (decimalPart ? '.' + decimalPart : '');\n}\n\nfunction omit(obj, keyMaps) {\n  var filteredObj = {};\n  Object.keys(obj).forEach(function (key) {\n    if (!keyMaps[key]) filteredObj[key] = obj[key];\n  });\n  return filteredObj;\n}\n\n/** set the caret positon in an input field **/\nfunction setCaretPosition(el, caretPos) {\n  el.value = el.value;\n  // ^ this is used to not only get \"focus\", but\n  // to make sure we don't have it everything -selected-\n  // (it causes an issue in chrome, and having it doesn't hurt any other browser)\n  if (el !== null) {\n    if (el.createTextRange) {\n      var range = el.createTextRange();\n      range.move('character', caretPos);\n      range.select();\n      return true;\n    }\n    // (el.selectionStart === 0 added for Firefox bug)\n    if (el.selectionStart || el.selectionStart === 0) {\n      el.focus();\n      el.setSelectionRange(caretPos, caretPos);\n      return true;\n    }\n\n    // fail city, fortunately this never happens (as far as I've tested) :)\n    el.focus();\n    return false;\n  }\n}\n\nvar thousandGroupSpacing = exports.thousandGroupSpacing = {\n  two: '2',\n  twoScaled: '2s',\n  three: '3',\n  four: '4'\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}